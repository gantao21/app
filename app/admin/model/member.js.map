{
    "version": 3,
    "sources": [
        "../../../src/admin/model/member.js"
    ],
    "names": [
        "module",
        "exports",
        "think",
        "Model",
        "login",
        "username",
        "password",
        "ip",
        "type",
        "console",
        "log",
        "map",
        "email",
        "mobile",
        "id",
        "_logic",
        "user",
        "where",
        "find",
        "isEmpty",
        "status",
        "is_admin",
        "autoLogin",
        "userInfo",
        "last_login_time"
    ],
    "mappings": ";;AAAAA,OAAOC,OAAP,GAAiB,cAAcC,MAAMC,KAApB,CAA0B;AACxC;;;;;;;;AAQKC,OAAN,CAAYC,QAAZ,EAAsBC,QAAtB,EAAgCC,EAAhC,EAAoCC,OAAO,CAA3C,EAA8CJ,QAAQ,CAAtD,EAAyD;AAAA;;AAAA;AACxDK,cAAQC,GAAR,CAAY,uBAAZ;AACA,UAAIC,MAAM,EAAV;AACC,cAAQH,IAAR;AACE,aAAK,CAAL;AACEG,cAAIN,QAAJ,GAAeA,QAAf;AACA;AACF,aAAK,CAAL;AACEM,cAAIC,KAAJ,GAAYP,QAAZ;AACA;AACF,aAAK,CAAL;AACEM,cAAIE,MAAJ,GAAaR,QAAb;AACA;AACF,aAAK,CAAL;AACEM,cAAIG,EAAJ,GAAST,QAAT;AACA;AACF,aAAK,CAAL;AACEM,gBAAM;AACJN,sBAAUA,QADN;AAEJO,mBAAOP,QAFH;AAGJQ,oBAAQR,QAHJ;AAIJU,oBAAQ;AAJJ,WAAN;AAMA;AACF;AACE,iBAAO,CAAP,CAtBJ,CAsBc;AAtBd;AAwBA,YAAMC,OAAO,MAAM,MAAKC,KAAL,CAAWN,GAAX,EAAgBO,IAAhB,EAAnB;AACM,aAAO,CAAC,CAAR,CA5BiD,CA4BtC;AACjB,UAAI,CAAChB,MAAMiB,OAAN,CAAcH,IAAd,CAAD,IAAwBA,KAAKI,MAAL,IAAe,CAA3C,EAA8C;AAC5C;AACA,YAAIhB,SAAS,CAAb,EAAgB;AACd,cAAIY,KAAKK,QAAL,IAAiB,CAArB,EAAwB;AACtB,mBAAO,CAAC,CAAR,CADsB,CACZ;AACX;AACF;AACD;AACA,YAAIf,aAAaU,KAAKV,QAAtB,EAAgC;AAC9B,gBAAM,MAAKgB,SAAL,CAAeN,IAAf,EAAqBT,EAArB,CAAN,CAD8B,CACC;AAC/B;AACA,gBAAMgB,WAAW;AACf,mBAAOP,KAAKF,EADG;AAEf,wBAAYE,KAAKX,QAFF;AAGf,+BAAmBW,KAAKQ;AAHT,WAAjB;;AAMA,iBAAOD,QAAP,CAT8B,CASb;AAClB,SAVD,MAUO;AACL,iBAAO,CAAC,CAAR,CADK,CACM;AACZ;AACF,OArBD,MAqBO;AACL,eAAO,CAAC,CAAR,CADK,CACM;AACZ;AApDsD;AAqDxD;;AA9DwC,CAA3C",
    "file": "../../../src/admin/model/member.js",
    "sourcesContent": [
        "module.exports = class extends think.Model {\n\t  /**\n     * 用户登录认证\n     * @param  string  $username 用户名\n     * @param  string  $password 用户密码\n     * @param  integer $type     用户名类型 （1-用户名，2-邮箱，3-手机，4-UID）\n     * @param  {int} login 登陆方式 0-前台登陆 ， 1-后台登陆\n     * @return integer           登录成功-用户ID，登录失败-错误编号\n     */\n  async login(username, password, ip, type = 1, login = 0) {\n  \tconsole.log('-------ucenter_member');\n  \tlet map = {};\n    switch (type) {\n      case 1:\n        map.username = username;\n        break;\n      case 2:\n        map.email = username;\n        break;\n      case 3:\n        map.mobile = username;\n        break;\n      case 4:\n        map.id = username;\n        break;\n      case 5:\n        map = {\n          username: username,\n          email: username,\n          mobile: username,\n          _logic: 'OR'\n        };\n        break;\n      default:\n        return 0; // 参数错误\n    }\n    const user = await this.where(map).find();\n          return -2; // 密码错误\n    if (!think.isEmpty(user) && user.status == 1) {\n      // 验证是否是管理用户\n      if (login == 1) {\n        if (user.is_admin == 0) {\n          return -3;// 不是管理用户，不能登陆后台\n        }\n      }\n      /* 验证用户密码 */\n      if (password === user.password) {\n        await this.autoLogin(user, ip);// 更新用户登录信息，自动登陆\n        /* 记录登录SESSION和COOKIES */\n        const userInfo = {\n          'uid': user.id,\n          'username': user.username,\n          'last_login_time': user.last_login_time\n        };\n\n        return userInfo; // 登录成功，返回用户信息\n      } else {\n        return -2; // 密码错误\n      }\n    } else {\n      return -1; // 用户不存在或被禁用\n    }\n  }\n\n};\n"
    ]
}