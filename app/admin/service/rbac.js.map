{
    "version": 3,
    "sources": [
        "../../../src/admin/service/rbac.js"
    ],
    "names": [
        "module",
        "exports",
        "think",
        "Service",
        "constructor",
        "userId",
        "config",
        "http",
        "isObject",
        "id",
        "extend",
        "type",
        "user",
        "role",
        "rule",
        "user_role",
        "userInfo",
        "check",
        "name",
        "and",
        "isString",
        "split",
        "authList",
        "getAuthList",
        "length",
        "indexOf",
        "logic",
        "item",
        "_getAuthList",
        "data",
        "flushAuthList",
        "key",
        "session",
        "get",
        "isEmpty",
        "set",
        "Promise",
        "all",
        "getUserInfo",
        "result",
        "forEach",
        "condition",
        "push",
        "replace",
        "a",
        "fn",
        "Function",
        "flag",
        "ids",
        "getRuleIds",
        "model",
        "field",
        "where",
        "status",
        "select",
        "find",
        "getRoles",
        "ruleIds",
        "rule_ids",
        "concat",
        "alias",
        "join",
        "table",
        "as",
        "on"
    ],
    "mappings": "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",
    "file": "../../../src/admin/service/rbac.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | gantao\n// +----------------------------------------------------------------------\n/**\n * Role-Based Access Control\n\n DROP TABLE IF EXISTS `cmswing_auth_role`;\n CREATE TABLE `cmswing_auth_role` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `desc` varchar(255) NOT NULL DEFAULT '',\n `status` tinyint(11) NOT NULL DEFAULT '1',\n `rule_ids` varchar(255) DEFAULT '' COMMENT '',\n PRIMARY KEY (`id`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n DROP TABLE IF EXISTS `cmswing_auth_rule`;\n CREATE TABLE `cmswing_auth_rule` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `name` varchar(255) NOT NULL DEFAULT '' COMMENT '',\n `desc` varchar(255) NOT NULL DEFAULT '' COMMENT '',\n `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '',\n `status` tinyint(11) NOT NULL DEFAULT '1',\n `condition` varchar(255) DEFAULT '' COMMENT '',\n PRIMARY KEY (`id`),\n UNIQUE KEY `name` (`name`),\n KEY `status` (`status`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n DROP TABLE IF EXISTS `cmswing_auth_user_role`;\n CREATE TABLE `cmswing_auth_user_role` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `user_id` int(11) NOT NULL,\n `role_id` int(11) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `user_role` (`user_id`,`role_id`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n * @type {Class}\n */\nmodule.exports = class extends think.Service {\n  /**\n   * init\n   * @param  {Number} userId []\n   * @param  {Object} config []\n   * @param  {Object} http   []\n   * @return {}        []\n   */\n  constructor(userId, config, http) {\n    super(http);\n    if (think.isObject(userId)) {\n      config = userId;\n      userId = config.id;\n    }\n    this.userId = userId;\n    this.config = think.extend({\n      type: 1, // auth type, 2 is session auth\n      user: 'ucenter_member', // user info table\n      role: 'auth_role', // role table\n      rule: 'auth_rule', // rule table\n      user_role: 'auth_user_role', // user - role relation table\n      userInfo: null\n    }, config);\n    this.http = http;\n  }\n  /**\n   * check auth\n   * @param  {String} name [auth type]\n   * @param  {Boolean} and  [condition]\n   * @return {Promise}      []\n   */\n  async check(name, and) {\n    if (think.isString(name)) {\n      name = name.split(',');\n    }\n    const authList = await this.getAuthList();\n\n    if (name.length === 1) {\n      return authList.indexOf(name[0]) > -1;\n    }\n\n    const logic = and ? 'every' : 'some';\n\n    return name[logic](item => {\n      return authList.indexOf(item) > -1;\n    });\n  }\n  async _getAuthList() {\n    let data;\n    if (this.config.type === 1) {\n      data = await this.flushAuthList();\n    } else {\n      const http = this.http;\n      const key = this.config('auth_key');\n      think.session(this.http);\n      let data = await http.session.get(key);\n      if (think.isEmpty(data)) {\n        data = await this.flushAuthList();\n        await http.session.set(key, data);\n      }\n    }\n    return data;\n  }\n  /**\n   * get auth list\n   * @return {Promise} []\n   */\n  async getAuthList() {\n    const data = await Promise.all([this._getAuthList(), this.getUserInfo()]);\n\n    const authList = data[0];\n    const userInfo = data[1];\n    const result = [];\n\n    authList.forEach(item => {\n      if (!item.condition) {\n        result.push(item.name);\n      } else {\n        const condition = item.condition.replace(/\\w+/, a => `userInfo.${a}`);\n        /* jslint evil: true */\n        const fn = new Function('userInfo', `return ${condition}`);\n        const flag = fn(userInfo);\n        if (flag) {\n          result.push(item.name);\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * flush auth list\n   * @return {Promise} []\n   */\n  async flushAuthList() {\n    const ids = await this.getRuleIds();\n    const model = think.model(this.config.rule);\n    return model.field('name,condition').where({id: ['IN', ids], status: 1}).select();\n  }\n  /**\n   * get user info\n   * @return {Promise} []\n   */\n  async getUserInfo() {\n    if (!think.isEmpty(this.config.userInfo)) {\n      return this.config.userInfo;\n    }\n    const data = await think.model(this.config.user).where({id: this.userId}).find();\n    this.config.userInfo = data;\n    return data;\n  }\n  /**\n   * get rule ids\n   * @return {Promise} []\n   */\n  async getRuleIds() {\n    const data = await this.getRoles();\n    // console.log(data);\n    let ids = [];\n    data.forEach(item => {\n      const ruleIds = (item.rule_ids || '').split(',');\n      ids = ids.concat(ruleIds);\n    });\n    return ids;\n  }\n  /**\n   * get roles\n   * @return {Promise} []\n   */\n  getRoles() {\n    return think.model(this.config.user_role).alias('a').join({\n      table: this.config.role,\n      as: 'b',\n      on: ['role_id', 'id']\n    }).where({\n      'a.user_id': this.userId,\n      'b.status': 1\n    }).select();\n  }\n};\n"
    ]
}